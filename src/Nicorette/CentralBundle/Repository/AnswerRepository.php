<?php

namespace Nicorette\CentralBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
use Doctrine\DBAL\Connection;

/**
 * Answer Repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnswerRepository extends EntityRepository {
	
	public function findAnswersByPatientAndQuestion($patient, $question_id){
		$qb = $this->createQueryBuilder('a')
					->join('a.quizAnswer', 'qa')
					->join('qa.patient', 'p')
					->join('a.choice', 'c')
					->join('c.question', 'q')
					->where('p.id = :pid')
					->andWhere('q.id = :qid')
					->setParameter('pid', $patient->getId())
					->setParameter('qid', $question_id);
		return $qb->getQuery()->getResult();
	}
	
	public function findAnswersByPatientAndQuiz($patient, $quiz){
		$qb = $this->createQueryBuilder('a')
		->join('a.quizAnswer', 'qa')
		->join('qa.patient', 'p')
		->join('qa.quiz', 'q')
		->where('p.id = :pid')
		->Andwhere('q.id = :qid')
		->setParameter('pid',$patient->getId())
		->setParameter('qid',$quiz->getId());
		return $qb->getQuery()->getResult();
	}
	
	public function findInitQuizPatientAnswers($patient, $code){
		$qb = $this->createQueryBuilder('a')
		->select('COUNT(a)')
		->join('a.quizAnswer', 'qa')
		->join('qa.patient', 'p')
		->join('qa.quiz', 'q')
		->where('p.id = :pid')
		->Andwhere('q.code = :code')
		->setParameter('pid',$patient->getId())
		->setParameter('code',$code);
		$results = $qb->getQuery()->getResult();
		foreach($results[0] as $result)
			return (int)$result;
	}
	public function GetLastAnswersForQuiz($patient,$quiz,$choicesIds,$limit){
        $qb = $this->createQueryBuilder('a')
            ->join('a.quizAnswer', 'qa')
            ->join('qa.patient', 'p')
            ->join('qa.quiz', 'q')
            ->where('p.id = :pid')
            ->Andwhere('q.id = :qid')
            ->Andwhere('a.choice  IN (:lid)')
            ->setParameter('pid',$patient->getId())
            ->setParameter('qid',$quiz->getId())
            ->setParameter('lid',array_values($choicesIds))
            //return the last answer
            ->orderBy('a.createdAt', 'DESC')
            ->setMaxResults($limit);
        if($limit == 1 && count($qb->getQuery()->getResult()) > 0):
        	$result = $qb->getQuery()->getResult();
       	 	return isset($result[0])?$result[0]:null;
        else:
            return $qb->getQuery()->getResult();
        endif;
    }


    public function getConsumedCigarette($patient,$quiz,$choicesId,$limit){
        $qb = $this->createQueryBuilder('a')
            ->join('a.quizAnswer', 'qa')
            ->join('qa.patient', 'p')
            ->join('qa.quiz', 'q')
            ->where('p.id = :pid')
            ->Andwhere('q.id = :qid')
            ->Andwhere('a.choice = :cid')
            ->setParameter('pid',$patient->getId())
            ->setParameter('qid',$quiz->getId())
            ->setParameter('cid',$choicesId)
            //return the last answer
            ->orderBy('a.createdAt', 'DESC')
            ->setMaxResults($limit);
        if($limit == 1 && count($qb->getQuery()->getResult()) > 0):
            $result = $qb->getQuery()->getResult();
            return isset($result[0])?$result[0]:null;
        else:
            return $qb->getQuery()->getResult();
        endif;
    }


    public function isKnownByDoctor($patient,$quiz,$choicesIds,$limit){
        $qb = $this->createQueryBuilder('a')
            ->join('a.quizAnswer', 'qa')
            ->join('qa.patient', 'p')
            ->join('qa.quiz', 'q')
            ->where('p.id = :pid')
            ->Andwhere('q.id = :qid')
            ->Andwhere('a.choice  IN (:cids)')
            ->setParameter('pid',$patient->getId())
            ->setParameter('qid',$quiz->getId())
            ->setParameter('cids',array_values($choicesIds))
            //return the last answer
            ->orderBy('a.createdAt', 'DESC')
            ->setMaxResults($limit);
        if($limit == 1 && count($qb->getQuery()->getResult()) > 0):
            $result = $qb->getQuery()->getResult();
            return isset($result[0])?$result[0]:null;
        else:
            return $qb->getQuery()->getResult();
        endif;
    }

}