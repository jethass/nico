<?php

namespace Proxies\__CG__\Nicorette\CentralBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Choice extends \Nicorette\CentralBundle\Entity\Choice implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'name', 'scoring', 'nextQuestion', 'renamedQuestion', 'hideQuestion', 'textType', 'question', 'answers', 'products');
        }

        return array('__isInitialized__', 'id', 'name', 'scoring', 'nextQuestion', 'renamedQuestion', 'hideQuestion', 'textType', 'question', 'answers', 'products');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Choice $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setNextQuestion($nextQuestion)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNextQuestion', array($nextQuestion));

        return parent::setNextQuestion($nextQuestion);
    }

    /**
     * {@inheritDoc}
     */
    public function getNextQuestion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNextQuestion', array());

        return parent::getNextQuestion();
    }

    /**
     * {@inheritDoc}
     */
    public function setRenamedQuestion($renamedQuestion)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRenamedQuestion', array($renamedQuestion));

        return parent::setRenamedQuestion($renamedQuestion);
    }

    /**
     * {@inheritDoc}
     */
    public function getRenamedQuestion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRenamedQuestion', array());

        return parent::getRenamedQuestion();
    }

    /**
     * {@inheritDoc}
     */
    public function setHideQuestion($hideQuestion)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHideQuestion', array($hideQuestion));

        return parent::setHideQuestion($hideQuestion);
    }

    /**
     * {@inheritDoc}
     */
    public function getHideQuestion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHideQuestion', array());

        return parent::getHideQuestion();
    }

    /**
     * {@inheritDoc}
     */
    public function setScoring($scoring)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setScoring', array($scoring));

        return parent::setScoring($scoring);
    }

    /**
     * {@inheritDoc}
     */
    public function getScoring()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getScoring', array());

        return parent::getScoring();
    }

    /**
     * {@inheritDoc}
     */
    public function setTextType($textType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTextType', array($textType));

        return parent::setTextType($textType);
    }

    /**
     * {@inheritDoc}
     */
    public function getTextType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTextType', array());

        return parent::getTextType();
    }

    /**
     * {@inheritDoc}
     */
    public function setQuestion(\Nicorette\CentralBundle\Entity\Question $question)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuestion', array($question));

        return parent::setQuestion($question);
    }

    /**
     * {@inheritDoc}
     */
    public function getQuestion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuestion', array());

        return parent::getQuestion();
    }

    /**
     * {@inheritDoc}
     */
    public function addAnswer($answer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAnswer', array($answer));

        return parent::addAnswer($answer);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAnswer($answer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAnswer', array($answer));

        return parent::removeAnswer($answer);
    }

    /**
     * {@inheritDoc}
     */
    public function getAnswers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAnswers', array());

        return parent::getAnswers();
    }

    /**
     * {@inheritDoc}
     */
    public function addProduct($product)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addProduct', array($product));

        return parent::addProduct($product);
    }

    /**
     * {@inheritDoc}
     */
    public function removeProduct($product)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeProduct', array($product));

        return parent::removeProduct($product);
    }

    /**
     * {@inheritDoc}
     */
    public function getProducts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProducts', array());

        return parent::getProducts();
    }

}
