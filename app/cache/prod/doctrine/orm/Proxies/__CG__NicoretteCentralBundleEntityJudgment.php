<?php

namespace Proxies\__CG__\Nicorette\CentralBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Judgment extends \Nicorette\CentralBundle\Entity\Judgment implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Nicorette\\CentralBundle\\Entity\\Judgment' . "\0" . 'id', '' . "\0" . 'Nicorette\\CentralBundle\\Entity\\Judgment' . "\0" . 'contain', '' . "\0" . 'Nicorette\\CentralBundle\\Entity\\Judgment' . "\0" . 'duration', '' . "\0" . 'Nicorette\\CentralBundle\\Entity\\Judgment' . "\0" . 'frequency', '' . "\0" . 'Nicorette\\CentralBundle\\Entity\\Judgment' . "\0" . 'personalization', '' . "\0" . 'Nicorette\\CentralBundle\\Entity\\Judgment' . "\0" . 'useful', 'patient', 'createdAt', 'updatedAt');
        }

        return array('__isInitialized__', '' . "\0" . 'Nicorette\\CentralBundle\\Entity\\Judgment' . "\0" . 'id', '' . "\0" . 'Nicorette\\CentralBundle\\Entity\\Judgment' . "\0" . 'contain', '' . "\0" . 'Nicorette\\CentralBundle\\Entity\\Judgment' . "\0" . 'duration', '' . "\0" . 'Nicorette\\CentralBundle\\Entity\\Judgment' . "\0" . 'frequency', '' . "\0" . 'Nicorette\\CentralBundle\\Entity\\Judgment' . "\0" . 'personalization', '' . "\0" . 'Nicorette\\CentralBundle\\Entity\\Judgment' . "\0" . 'useful', 'patient', 'createdAt', 'updatedAt');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Judgment $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setContain($contain)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContain', array($contain));

        return parent::setContain($contain);
    }

    /**
     * {@inheritDoc}
     */
    public function getContain()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContain', array());

        return parent::getContain();
    }

    /**
     * {@inheritDoc}
     */
    public function setDuration($duration)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDuration', array($duration));

        return parent::setDuration($duration);
    }

    /**
     * {@inheritDoc}
     */
    public function getDuration()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDuration', array());

        return parent::getDuration();
    }

    /**
     * {@inheritDoc}
     */
    public function setFrequency($frequency)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFrequency', array($frequency));

        return parent::setFrequency($frequency);
    }

    /**
     * {@inheritDoc}
     */
    public function getFrequency()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFrequency', array());

        return parent::getFrequency();
    }

    /**
     * {@inheritDoc}
     */
    public function setPersonalization($personalization)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPersonalization', array($personalization));

        return parent::setPersonalization($personalization);
    }

    /**
     * {@inheritDoc}
     */
    public function getPersonalization()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPersonalization', array());

        return parent::getPersonalization();
    }

    /**
     * {@inheritDoc}
     */
    public function setUseful($useful)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUseful', array($useful));

        return parent::setUseful($useful);
    }

    /**
     * {@inheritDoc}
     */
    public function getUseful()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUseful', array());

        return parent::getUseful();
    }

    /**
     * {@inheritDoc}
     */
    public function getPatient()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPatient', array());

        return parent::getPatient();
    }

    /**
     * {@inheritDoc}
     */
    public function setPatient($patient)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPatient', array($patient));

        return parent::setPatient($patient);
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', array($createdAt));

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', array());

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', array($updatedAt));

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', array());

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setData($request, $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setData', array($request, $user));

        return parent::setData($request, $user);
    }

}
